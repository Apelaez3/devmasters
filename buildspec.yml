version: 0.2

env:
  variables:
    AWS_REGION: "us-east-1"
    ECR_REPOSITORY: "495599755529.dkr.ecr.${AWS_REGION}.amazonaws.com"

phases:
  install:
    runtime-versions:
      python: 3.12
    commands:
      - echo "Installing dependencies"
      - pip install -r requirements.txt

  pre_build:
    commands:
      - docker-compose up -d
      - sleep 10
      - echo "Running tests"
      - python -m unittest test_app.py
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY
      - echo "Verifying ECR repository..."
      - aws ecr describe-repositories --repository-names flask_app --region $AWS_REGION || aws ecr create-repository --repository-name flask_app --region $AWS_REGION
      - docker-compose down

  build:
    commands:
      - echo "Build started on `date`"
      - docker build -t flask_app .
      - docker tag flask_app:latest $ECR_REPOSITORY/flask_app:latest

  post_build:
    commands:
      - echo "Build completed on `date`"
      - docker push $ECR_REPOSITORY/flask_app:latest
      - printf '[{"name":"container-app-flask","imageUri":"%s"}]' "$ECR_REPOSITORY/flask_app:latest" > imagedefinitions.json
      - printf '{"ImageURI":"%s"}' "$ECR_REPOSITORY/flask_app:latest" > imageDetail.json
      - cat imagedefinitions.json
      - docker image prune -f
      - docker container prune -f

artifacts:
  files:
    - imagedefinitions.json
    - imageDetail.json
    - appspec.json
    - taskdef.json
  secondary-artifacts:
    DefinitionArtifact:
      files:
        - appspec.json
        - taskdef.json
    ImageArtifact:
      files:
        - imageDetail.json



